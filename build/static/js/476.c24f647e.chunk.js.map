{"version":3,"file":"static/js/476.c24f647e.chunk.js","mappings":"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","sources":["components/AccountGrowthChart.js","components/TopDurations.js","components/MostUsedHashtags.js","components/UserOverview.js","components/TotalViewsChart.js","components/TotalLikesChart.js","components/TotalSharesChart.js","components/TotalCommentsChart.js","pages/StatsPage.js"],"sourcesContent":["import React,{useState, useEffect} from 'react'\r\nimport ReactApexChart from \"react-apexcharts\";\r\n\r\nfunction AccountGrowthChart({analyticsData}) {\r\n\r\n    const [videosTimeSeries, setVideosTimeSeries] = useState([])\r\n    const [viewsTimeSeries, setViewsTimeSeries] = useState([])\r\n    const [likesTimeSeries, setLikesTimeSeries] = useState([])\r\n    const [sharesTimeSeries, setSharesTimeSeries] = useState([])\r\n    const [commentsTimeSeries, setCommentsTimeSeries] = useState([])\r\n\r\n    const [allTimeSeries, setAllTimeSeries] = useState([])\r\n\r\n    useEffect(()=>{\r\n        if(!analyticsData) return\r\n        //if video_time_series length is bigger than 100, calculate the total views  for each month, instad hcing the data for each day\r\n        if(analyticsData.videos_time_series?.length > 100){\r\n\r\n            var allTimeSeriesByMonth = {}\r\n            for (let i = 0; i < analyticsData.videos_time_series.length; i++) {\r\n                var video = analyticsData.videos_time_series[i]\r\n\r\n                var date = new Date(video['Date Posted'])\r\n                var month = date.getMonth()\r\n                //get month word\r\n                month = new Date(date.getFullYear(), month, 1).toLocaleString('default', { month: 'short' })\r\n                var year = date.getFullYear()\r\n                var monthYear = month + '-' + year\r\n                if(allTimeSeriesByMonth[monthYear]){\r\n\r\n                    allTimeSeriesByMonth[monthYear].Videos += video.Videos\r\n                    allTimeSeriesByMonth[monthYear].Views += analyticsData.views_time_series[i].Views\r\n                    allTimeSeriesByMonth[monthYear].Likes += analyticsData.likes_time_series[i].Likes\r\n                    allTimeSeriesByMonth[monthYear].Shares += analyticsData.shares_time_series[i].Shares\r\n                    allTimeSeriesByMonth[monthYear].Comments += analyticsData.comments_time_series[i].Comments\r\n                }else{\r\n\r\n                    allTimeSeriesByMonth[monthYear] = {\r\n                        Videos: video.Videos,\r\n                        Views: analyticsData.views_time_series[i].Views,\r\n                        Likes: analyticsData.likes_time_series[i].Likes,\r\n                        Shares: analyticsData.shares_time_series[i].Shares,\r\n                        Comments: analyticsData.comments_time_series[i].Comments,\r\n                        'Date Posted': monthYear\r\n                    }\r\n                }\r\n            }\r\n            \r\n            setAllTimeSeries(Object.values(allTimeSeriesByMonth))\r\n            \r\n            \r\n        }else{\r\n          setAllTimeSeries(analyticsData.videos_time_series)\r\n        }\r\n\r\n\r\n        // setVideosTimeSeries(analyticsData.videos_time_series)\r\n        // setViewsTimeSeries(analyticsData.views_time_series)\r\n        // setLikesTimeSeries(analyticsData.likes_time_series)\r\n        // setSharesTimeSeries(analyticsData.shares_time_series)\r\n        // setCommentsTimeSeries(analyticsData.comments_time_series)\r\n    },[analyticsData])\r\nconsole.log({allTimeSeries})\r\n    const [chartData, setChartData] = useState(null)\r\n    useEffect(()=>{\r\n        if(!allTimeSeries) return\r\n\r\n        setChartData( {\r\n            series: [{\r\n                name: 'Videos',\r\n                data: allTimeSeries?.map((video) => Number(video.Videos)),\r\n              \r\n              //change color to blue \r\n\r\n            }, {\r\n                name: 'Views',\r\n                data: allTimeSeries?.map((video) => Number(video.Views)),\r\n              \r\n            }, {\r\n                name: 'Likes',\r\n                data: allTimeSeries?.map((video) => Number(video.Likes)),\r\n              \r\n            },\r\n            {\r\n                name: 'Comments',\r\n                data: allTimeSeries?.map((video) => Number(video.Comments)),\r\n              \r\n            },\r\n            {\r\n                name: 'Shares',\r\n                data: allTimeSeries?.map((video) => Number(video.Shares)),\r\n              \r\n            },\r\n        ],\r\n            options: {\r\n              chart: {\r\n                height: 350,\r\n                \r\n                stacked: false,\r\n                toolbar: {\r\n                  show: false\r\n                }\r\n              },\r\n              colors: ['#008FFB', '#F1416C', '#7239EA', '#50CD89', '#FFC700'],\r\n              fill: {\r\n              //  type: \"gradient\",\r\n                gradient: {\r\n        \r\n                  //shadeIntensity: 10,\r\n                  //opacityFrom: 0.9,\r\n                 // opacityTo: 0.8,\r\n                  //stops: [0, 90, 100]\r\n                }\r\n              },\r\n\r\n              dataLabels: {\r\n                enabled: false\r\n              },\r\n              stroke: {\r\n                curve: 'smooth',\r\n                width: 2,\r\n              },\r\n\r\n              xaxis: {\r\n                   // type: 'datetime',\r\n                categories: allTimeSeries?.map((video) =>\r\n                  (video['Date Posted'])\r\n                ),\r\n                //hide \r\n                labels: {\r\n                  show: false\r\n                }\r\n              },\r\n              yaxis: [\r\n                {\r\n                  axisTicks: {\r\n                    show: true,\r\n                  },\r\n                  axisBorder: {\r\n                    show: true,\r\n                    color: '#008FFB'\r\n                  },\r\n                  labels: {\r\n                    style: {\r\n                      colors: '#008FFB',\r\n                    }\r\n                  },\r\n                  title: {\r\n                    text: \"Videos Uploaded\",\r\n                    style: {\r\n                      color: '#008FFB',\r\n                    }\r\n                  },\r\n                  tooltip: {\r\n                    enabled: true\r\n                  }\r\n                },\r\n                {\r\n                  seriesName: 'Views',\r\n                  opposite: true,\r\n                  axisTicks: {\r\n                    show: true,\r\n                  },\r\n                  axisBorder: {\r\n                    show: true,\r\n                    color: '#F1416C'\r\n                  },\r\n                  labels: {\r\n                    style: {\r\n                      colors: '#F1416C',\r\n                    }\r\n                  },\r\n                  title: {\r\n                    text: \"Views\",\r\n                    style: {\r\n                      color: '#F1416C',\r\n                    }\r\n                  },\r\n                },\r\n                {\r\n                  seriesName: 'Views',\r\n                  show: false\r\n\r\n                \r\n                },\r\n                {\r\n                  seriesName: 'Views',\r\n                  show: false\r\n\r\n                \r\n                },\r\n                {\r\n                  seriesName: 'Views',\r\n                  show: false\r\n\r\n                \r\n                },\r\n                {\r\n                  seriesName: 'Views',\r\n                  show: false\r\n\r\n                \r\n                },\r\n              ],\r\n              tooltip: {\r\n               \r\n              },\r\n              legend: {\r\n                horizontalAlign: 'left',\r\n                offsetX: 40\r\n              }\r\n            },\r\n        }\r\n          \r\n          \r\n          )\r\n    },[allTimeSeries])\r\n\r\n    // console.log(videosTimeSeries?.map((video)=> video.Videos))\r\n    // console.log(viewsTimeSeries?.map((video)=> video.Views))\r\n  return (\r\n    <div id=\"chart\" className='block py-6 pb-0 rounded-xl shadow-sm bg-white mx-auto my-8' style={{width:'90%', maxWidth:'1700px', margin:'auto'}}>\r\n                     <h1 className='text-2xl font-medium text-slate-500 p-6'>Account Growth </h1>\r\n\r\n         <div>\r\n          {analyticsData && chartData && <ReactApexChart options={chartData?.options} series={chartData?.series} type=\"area\" height={350} />}\r\n          </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AccountGrowthChart","import React, { useState, useEffect } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\n\r\nfunction TopDurations({ analyticsData }) {\r\n\r\n    const [topDurations, setTopDurations] = useState(null)\r\n\r\n    useEffect(() => {\r\n        if (!analyticsData) return\r\n\r\n        var videoDurationData = analyticsData?.video_duration_data\r\n        //turn the object into an array of objects\r\n        var videoDurationDataArray = Object.keys(videoDurationData).map(function (key) {\r\n            var title;\r\n            switch (key) {\r\n                case 'duration_0_15':\r\n                    title = '0-15s'\r\n                    break;\r\n                case 'duration_15_30':\r\n                    title = '15-30s'\r\n                    break;\r\n                case 'duration_30_60':\r\n                    title = '30-60s'\r\n                    break;\r\n                case 'duration_60_180':\r\n                    title = '60-180s'\r\n                    break;\r\n                case 'duration_180_600':\r\n                    title = '180-600s'\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            return { key: key, value: videoDurationData[key], title: title };\r\n        });\r\n\r\n        //sort by value\r\n        videoDurationDataArray.sort(function (a, b) {\r\n            return b.value - a.value;\r\n        });\r\n\r\n\r\n        setTopDurations(videoDurationDataArray)\r\n    }, [analyticsData])\r\n\r\n\r\n    const chartData = {\r\n        series: [{\r\n            name: 'Percentage of videos',\r\n            data: topDurations?.map((duration) => (duration.value?.toFixed(0)))\r\n\r\n\r\n        }],\r\n        options: {\r\n            chart: {\r\n                fontFamily: 'inherit',\r\n                type: 'bar',\r\n                height: 350,\r\n                toolbar: {\r\n                    show: false\r\n                }\r\n            },\r\n            plotOptions: {\r\n\r\n                bar: {\r\n                    borderRadius: 8,\r\n\r\n                    horizontal: true,\r\n                    distributed: true,\r\n                    barHeight: 50,\r\n                    dataLabels: {\r\n                        position: 'bottom' // use 'bottom' for left and 'top' for right align(textAnchor)\r\n                    }\r\n                }\r\n            },\r\n\r\n            dataLabels: {  // Docs: https://apexcharts.com/docs/options/datalabels/\r\n                enabled: true,\r\n                textAnchor: 'start',\r\n                offsetX: 0,\r\n                offsetY: -2,\r\n\r\n                style: {\r\n                    fontSize: '14px',\r\n                    fontWeight: '600',\r\n                    align: 'left',\r\n                },\r\n                formatter: function (val) {\r\n                    return val + '%';\r\n                }\r\n            },\r\n            legend: {\r\n                show: false\r\n            },\r\n            colors: ['#3E97FF', '#F1416C', '#50CD89', '#FFC700', '#7239EA'],\r\n\r\n            xaxis: {\r\n                categories: topDurations?.map((duration) => (duration.title))\r\n                ,\r\n                labels: {\r\n                    formatter: function (val) {\r\n                        return val + \"%\"\r\n                    },\r\n                    style: {\r\n                        //colors: labelColor,\r\n                        fontSize: '14px',\r\n                        fontWeight: '600',\r\n                        align: 'left'\r\n                    }\r\n                },\r\n                axisBorder: {\r\n                    show: false\r\n                }\r\n            },\r\n            yaxis: {\r\n                labels: {\r\n                    formatter: function (val, opt) {\r\n                        if (Number.isInteger(val)) {\r\n                            var percentage = parseInt(val * 100 / 18).toString();\r\n                            return val + ' - ' + percentage + '%';\r\n                        } else {\r\n                            return val;\r\n                        }\r\n                    },\r\n                    style: {\r\n                        // colors: labelColor,\r\n                        fontSize: '14px',\r\n                        fontWeight: '600',\r\n                        margin: 10\r\n                    },\r\n                    offsetY: 2,\r\n                    offsetX: -10,\r\n                    align: 'left'\r\n                },\r\n                margin: 10\r\n            },\r\n            grid: {\r\n                //  borderColor: borderColor,                \r\n                xaxis: {\r\n                    lines: {\r\n                        show: true\r\n                    }\r\n                },\r\n                yaxis: {\r\n                    padding: {\r\n                        bottom: 20\r\n                    },\r\n                    lines: {\r\n                        show: false\r\n                    }\r\n                },\r\n                strokeDashArray: 4\r\n            },\r\n            tooltip: {\r\n                style: {\r\n                    fontSize: '12px'\r\n                },\r\n                y: {\r\n                    formatter: function (val) {\r\n                        return val + '%';\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"block p-6 rounded-xl shadow-sm bg-white mx-auto my-8\" style={{ width: '90%', maxWidth: '500px' }}>\r\n            <h1 className='text-2xl font-medium text-slate-500 '>Most Common Video Durations </h1>\r\n\r\n            <div className=\"block rounded-xl bg-white mx-auto\"  >\r\n                {/* {topDurations  && topDurations.map((duration)=>(\r\n                <div>\r\n                \r\n                <div className='flex justify-between my-4\t'>\r\n                    <div className='whitespace-nowrap font-semibold text-gray-900 '>{duration.title}s</div>\r\n                    <div className='flex items-center'>\r\n                        <div className='whitespace-nowrap mr-2  text-gray-500 '>{duration.value?.toFixed(0)} %</div>\r\n                        <div className=\" h-5 w-full bg-gray-100 dark:bg-neutral-600\" style={{ width: '200px' }}>\r\n                            <div className=\"h-5 bg-orange-500\" style={{ width: duration.value + '%' }} ></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n              \r\n\r\n\r\n\r\n            </div>\r\n            )) } */}\r\n\r\n                <ReactApexChart options={chartData.options} series={chartData.series} type=\"bar\" height={350} />\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopDurations","import React, {useEffect, useState} from 'react'\r\n\r\nfunction MostUsedHashtags({analyticsData}) {\r\n\r\n    const [mostUsedHashtags, setMostUsedHashtags] = useState(null)\r\n\r\n    useEffect(()=>{\r\n        if(!analyticsData) return\r\n\r\n        setMostUsedHashtags(analyticsData?.hashtags_data)\r\n    })\r\n\r\n    console.log({mostUsedHashtags})\r\n  return (\r\n    <div className='block p-6 rounded-xl shadow-sm bg-white mx-auto my-8' style={{width:'90%', maxWidth:'500px'}}>\r\n        <h1 className='text-2xl font-medium text-slate-500 '>Most Used Hashtags </h1>\r\n         <div className=\"block p-6 rounded-xl  bg-white mx-auto my-8\"  style={{overflowY:'scroll', overflowX:'hidden' , height:'250px'}} >\r\n            {mostUsedHashtags  && mostUsedHashtags.map((hashtag, i)=>(\r\n                <div>\r\n                \r\n                <div className='flex justify-between my-4\t'>\r\n                    <div className='whitespace-nowrap font-semibold text-gray-700 '><span style={{marginRight:'10px'}} className='text-gray-500 text-sm'>{i+1} </span> #{hashtag.hashtag?.substring(0,14)}</div>\r\n                    <div className='flex items-center'>\r\n                        <div className='whitespace-nowrap mr-2 text-xs font-semibold  text-white  relative  ' style={{left:'17%', width:'20px'}}>{hashtag.count}</div>\r\n                        <div className=\" h-7 w-full bg-gray-00 dark:bg-neutral-600\" style={{ width: '200px' }}>\r\n                            <div className=\"h-7 bg-orange-500 rounded-md\" style={{ width: (hashtag.count/mostUsedHashtags[0].count*100) + '%', minWidth:'30px' }} ></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n              \r\n\r\n\r\n\r\n            </div>\r\n            )) }\r\n\r\n\r\n\r\n        </div> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MostUsedHashtags","import React, { useEffect, useState } from 'react'\r\nimport { RiClapperboardFill } from 'react-icons/ri'\r\nimport { BsFillStarFill } from 'react-icons/bs'\r\nfunction UserOverview({ analyticsData }) {\r\n\r\n    const [profileDetails, setProfileDetails] = useState(null)\r\n    const [totals, setTotals] = useState(null)\r\n    useEffect(() => {\r\n        if (!analyticsData) return\r\n        setProfileDetails(analyticsData.profile_details)\r\n        setTotals(analyticsData.totals)\r\n    })\r\n\r\n    console.log({ profileDetails })\r\n\r\n\r\n    const ShortenNumber = (number) => {\r\n        if (number < 1000) {\r\n            return number\r\n        }\r\n        if (number < 1000000) {\r\n            return (number / 1000).toFixed(1) + 'k'\r\n        }\r\n        if (number < 1000000000) {\r\n            return (number / 1000000).toFixed(1) + 'm'\r\n        }\r\n        if (number < 1000000000000) {\r\n            return (number / 1000000000).toFixed(1) + 'b'\r\n        }\r\n        return '1t+'\r\n    }\r\n\r\n    return (\r\n        <div className='block p-6 py-12 rounded-xl shadow-sm bg-white ' style={{ width: '90%', maxWidth: '1700px', margin: 'auto', marginBlock:'12px' }}>\r\n            {profileDetails && totals &&\r\n                <div className='flex flex-wrap' >\r\n\r\n                    <div className='flex align-center'>\r\n                        <img\r\n                            src={global.HOST + '/api/profile/photo/' + profileDetails?.username}\r\n                            alt=\"profile pic\"\r\n                            style={{ width: '120px', height: '120px', filter: 'brightness(1)' }}\r\n                            className='is-squircle' />\r\n                        <div className=' flex flex-col ml-10 justify-around'>\r\n                            <h2 className=' text-lg text-gray-800'>@{profileDetails?.username}</h2>\r\n                            <div style={{ width: '90%', borderBottom: '1px solid whitesmoke', marginBlock: '10px' }}></div>\r\n                            <div className='text-xs text-gray-600 font-thin'>\r\n                                <div style={{ maxWidth: '300px' }} >{profileDetails?.bio}</div>\r\n                                <div className='font-semibold text-gray-700 border-b mt-4 w-fit'>{profileDetails?.link_in_bio}</div>\r\n                            </div>\r\n\r\n                        </div>\r\n                    </div>\r\n                    <div className='flex m-auto flex-wrap'>\r\n                        <div className=\"card flex-row justify-between p-4 mt-8 xl:mt-0 \" style={{ width: '170px', marginInline: '30px', height: '111px' }}>\r\n                            <div>\r\n                                <p className=\"text-xs+ uppercase \t\" style={{ color: '#64748b', fontSize: '12px' }}>\r\n                                    Followers\r\n                                </p>\r\n                                <div className=\"mt-8 flex items-baseline space-x-1\" style={{ marginTop: '10px' }}>\r\n                                    <p className=\"text-2xl font-semibold text-slate-700 dark:text-navy-100\" style={{ fontSize: '20px' }}>\r\n                                        {profileDetails?.followers}\r\n                                    </p>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mask is-squircle flex h-10 w-10 items-center justify-center bg-warning/10\">\r\n                                <i className=\" text-xl text-warning\">\r\n                                    <BsFillStarFill />\r\n                                </i>\r\n                            </div>\r\n                            <div className=\"absolute bottom-0 right-0 overflow-hidden rounded-lg\">\r\n                                <i className=\" translate-x-1/4 translate-y-1/4 text-5xl opacity-15\" >\r\n                                    <BsFillStarFill style={{ transform: 'translateY(10px)' }} />\r\n                                </i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"card flex-row justify-between p-4 mt-8 xl:mt-0 \" style={{ width: '170px', marginInline: '30px', height: '111px' }}>\r\n                            <div>\r\n                                <p className=\"text-xs+ uppercase \t\" style={{ color: '#64748b', fontSize: '12px' }}>\r\n                                    Following\r\n                                </p>\r\n                                <div className=\"mt-8 flex items-baseline space-x-1\" style={{ marginTop: '10px' }}>\r\n                                    <p className=\"text-2xl font-semibold text-slate-700 dark:text-navy-100\" style={{ fontSize: '20px' }}>\r\n                                        {ShortenNumber(profileDetails?.following)}\r\n                                    </p>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mask is-squircle flex h-10 w-10 items-center justify-center bg-success/10\">\r\n                                <i className=\"fa-solid fa-user text-xl text-success\">\r\n                                </i>\r\n                            </div>\r\n                            <div className=\"absolute bottom-0 right-0 overflow-hidden rounded-lg\">\r\n                                <i className=\"fa-solid fa-user translate-x-1/4 translate-y-1/4 text-5xl opacity-15\">\r\n                                </i>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"card flex-row justify-between p-4 mt-8 xl:mt-0 \" style={{ width: '170px', marginInline: '30px', height: '111px' }}>\r\n                            <div>\r\n                                <p className=\"text-xs+ uppercase \t\" style={{ color: '#64748b', fontSize: '12px' }}>\r\n                                    Videos\r\n                                </p>\r\n                                <div className=\"mt-8 flex items-baseline space-x-1\" style={{ marginTop: '10px' }}>\r\n                                    <p className=\"text-2xl font-semibold text-slate-700 dark:text-navy-100\" style={{ fontSize: '20px' }}>\r\n                                        {totals?.total_videos}\r\n                                    </p>\r\n\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"mask is-squircle flex h-10 w-10 items-center justify-center bg-info/10\">\r\n                                <i className=\" text-xl text-info\">\r\n                                    <RiClapperboardFill />\r\n                                </i>\r\n                            </div>\r\n                            <div className=\"absolute bottom-0 right-0 overflow-hidden rounded-lg\">\r\n\r\n                                <RiClapperboardFill className=\" translate-x-1/4 translate-y-1/4 text-5xl opacity-15\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserOverview","import React, { useEffect, useState } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\nfunction TotalViewsChart({ analyticsData, color }) {\r\n  const ShortenNumber = (number) => {\r\n    if (number < 1000) {\r\n      return number\r\n    }\r\n    if (number < 1000000) {\r\n      return (number / 1000).toFixed(1) + 'k'\r\n    }\r\n    if (number < 1000000000) {\r\n      return (number / 1000000).toFixed(1) + 'm'\r\n    }\r\n    if (number < 1000000000000) {\r\n      return (number / 1000000000).toFixed(1) + 'b'\r\n    }\r\n    return '1t+'\r\n  }\r\n\r\n\r\n  const [viewsTimeSeries, setViewsTimeSeries] = useState(null)\r\n  useEffect(() => {\r\n    if (!analyticsData) return\r\n    var viewsTimeSeries = (analyticsData?.views_time_series)\r\n    //if viewsTimeSeries length is bigger than 100, calculate the total views  for each month, instad hcing the data for each day \r\n    if (viewsTimeSeries?.length > 100) {\r\n\r\n      var viewsTimeSeriesByMonth = {}\r\n      viewsTimeSeries.forEach((views) => {\r\n\r\n        var date = new Date(views['Date Posted'])\r\n        var month = date.getMonth()\r\n        //get month word \r\n        month = new Date(date.getFullYear(), month, 1).toLocaleString('default', { month: 'short' })\r\n        var year = date.getFullYear()\r\n        var monthYear = month + '-' + year\r\n        if (viewsTimeSeriesByMonth[monthYear]) {\r\n          viewsTimeSeriesByMonth[monthYear].Views += views.Views\r\n        } else {\r\n          viewsTimeSeriesByMonth[monthYear] = {\r\n            Views: views.Views,\r\n            'Date Posted': monthYear\r\n          }\r\n        }\r\n      }\r\n      )\r\n      viewsTimeSeries = Object.values(viewsTimeSeriesByMonth)\r\n    }\r\n    setViewsTimeSeries(viewsTimeSeries)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  }, [analyticsData])\r\n  //console.log({ viewsTimeSeries })\r\n  const chartData = {\r\n\r\n    series: [{\r\n      name: \"Views\",\r\n      data: viewsTimeSeries?.map((views) => (views?.Views?.toFixed(0))),\r\n      //color \r\n      color: color\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'area',\r\n        height: 350,\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n        toolbar: {\r\n          show: false\r\n        }\r\n\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n        //change color \r\n      },\r\n      colors: [color,'#F1416C', , '#50CD89', '#FFC700', '#7239EA'],\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.9,\r\n          opacityTo: 0.4,\r\n          stops: [0, 80, 100]\r\n        }\r\n      },\r\n\r\n      labels: viewsTimeSeries?.map((views) => (views?.['Date Posted'])),\r\n      xaxis: {\r\n        //   type: 'datetime',\r\n        labels: {\r\n          show: false,\r\n        },\r\n      },\r\n      yaxis: {\r\n        opposite: true,\r\n        labels: {\r\n          show: false,\r\n          formatter: function (val) {\r\n            return ShortenNumber(val) + ' Views ';\r\n          }\r\n        },\r\n      },\r\n      grid: {\r\n        //  borderColor: borderColor,                \r\n\r\n        strokeDashArray: 4,\r\n        //hide horizontal grid lines\r\n        yaxis: {\r\n          lines: {\r\n            show: false\r\n          }\r\n        },\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left'\r\n      }\r\n    },\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"block py-6 pb-0 rounded-xl shadow-sm bg-white  my-8\" style={{ width: '90%', maxWidth: '300px', height:'fit-content', borderLeft: 'solid 4px '+color, borderTopLeftRadius: '0px', borderBottomLeftRadius: '0px' }}>\r\n      <p className=\"text-3xl font-semibold text-slate-700 dark:text-navy-100 pl-6\" style={{ fontSize: '22px' }}>\r\n        {ShortenNumber(analyticsData?.totals?.total_views)} <span style={{ color: color }}>Total Views</span>\r\n      </p>\r\n      <div>\r\n\r\n        {viewsTimeSeries && <ReactApexChart options={chartData?.options} series={chartData?.series} type=\"area\" height={200} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TotalViewsChart","import React, { useEffect, useState } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\nfunction TotalLikesChart({ analyticsData, color }) {\r\n  const ShortenNumber = (number) => {\r\n    if (number < 1000) {\r\n      return number\r\n    }\r\n    if (number < 1000000) {\r\n      return (number / 1000).toFixed(1) + 'k'\r\n    }\r\n    if (number < 1000000000) {\r\n      return (number / 1000000).toFixed(1) + 'm'\r\n    }\r\n    if (number < 1000000000000) {\r\n      return (number / 1000000000).toFixed(1) + 'b'\r\n    }\r\n    return '1t+'\r\n  }\r\n\r\n\r\n  const [likesTimeSeries, setLikesTimeSeries] = useState(null)\r\n  useEffect(() => {\r\n    if (!analyticsData) return\r\n    var likesTimeSeries = (analyticsData?.likes_time_series)\r\n    //if likesTimeSeries length is bigger than 100, calculate the total views  for each month, instad hcing the data for each day \r\n    if (likesTimeSeries?.length > 100) {\r\n\r\n      var likesTimeSeriesByMonth = {}\r\n      likesTimeSeries.forEach((likes) => {\r\n            \r\n            var date = new Date(likes['Date Posted'])\r\n            var month = date.getMonth()\r\n            //get month word \r\n            month = new Date(date.getFullYear(), month, 1).toLocaleString('default', { month: 'short' })\r\n            var year = date.getFullYear()\r\n            var monthYear = month + '-' + year\r\n            if (likesTimeSeriesByMonth[monthYear]) {\r\n            likesTimeSeriesByMonth[monthYear].Likes += likes.Likes\r\n            } else {\r\n            likesTimeSeriesByMonth[monthYear] = {\r\n                Likes: likes.Likes,\r\n                'Date Posted': monthYear\r\n            }\r\n            }\r\n        }   \r\n        )\r\n\r\n        likesTimeSeries = Object.values(likesTimeSeriesByMonth)\r\n    }\r\n    setLikesTimeSeries(likesTimeSeries)\r\n\r\n\r\n\r\n  }, [analyticsData])\r\n  console.log({ likesTimeSeries })\r\n  const chartData = {\r\n\r\n    series: [{\r\n      name: \"Likes\",\r\n      data: likesTimeSeries?.map((likes) => (likes?.Likes?.toFixed(0))),\r\n      //color \r\n      color: color\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'area',\r\n        height: 350,\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n        toolbar: {\r\n          show: false\r\n        }\r\n\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n        //change color \r\n      },\r\n      colors: [color],\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.9,\r\n          opacityTo: 0.4,\r\n          stops: [0, 80, 100]\r\n        }\r\n      },\r\n\r\n      labels: likesTimeSeries?.map((likes) => (likes?.['Date Posted'])),\r\n      xaxis: {\r\n        //   type: 'datetime',\r\n        labels: {\r\n          show: false,\r\n        },\r\n      },\r\n      yaxis: {\r\n        opposite: true,\r\n        labels: {\r\n          show: false,\r\n          formatter: function (val) {\r\n            return ShortenNumber(val) + ' Likes ';\r\n          }\r\n        },\r\n      },\r\n      grid: {\r\n        //  borderColor: borderColor,                \r\n\r\n        strokeDashArray: 4,\r\n        //hide horizontal grid lines\r\n        yaxis: {\r\n          lines: {\r\n            show: false\r\n          }\r\n        },\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left'\r\n      }\r\n    },\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"block py-6 pb-0 rounded-xl shadow-sm bg-white  my-8\" style={{ width: '90%', maxWidth: '300px', height:'fit-content', borderLeft: 'solid 4px '+color, borderTopLeftRadius: '0px', borderBottomLeftRadius: '0px' }}>\r\n      <p className=\"text-3xl font-semibold text-slate-700 dark:text-navy-100 pl-6\" style={{ fontSize: '22px' }}>\r\n        {ShortenNumber(analyticsData?.totals?.total_likes)} <span style={{ color: color }}>Total Likes</span>\r\n      </p>\r\n      <div>\r\n\r\n        {likesTimeSeries && <ReactApexChart options={chartData?.options} series={chartData?.series} type=\"area\" height={200} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TotalLikesChart","import React, { useEffect, useState } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\nfunction TotalLikesChart({ analyticsData, color }) {\r\n  const ShortenNumber = (number) => {\r\n    if (number < 1000) {\r\n      return number\r\n    }\r\n    if (number < 1000000) {\r\n      return (number / 1000).toFixed(1) + 'k'\r\n    }\r\n    if (number < 1000000000) {\r\n      return (number / 1000000).toFixed(1) + 'm'\r\n    }\r\n    if (number < 1000000000000) {\r\n      return (number / 1000000000).toFixed(1) + 'b'\r\n    }\r\n    return '1t+'\r\n  }\r\n\r\n\r\n  const [sharesTimeSeries, setSharesTimeSeries] = useState(null)\r\n  useEffect(() => {\r\n    if (!analyticsData) return\r\n    var sharesTimeSeries = (analyticsData?.shares_time_series)\r\n    //if sharesTimeSeries length is bigger than 100, calculate the total views  for each month, instad hcing the data for each day \r\n    if (sharesTimeSeries?.length > 100) {\r\n\r\n      var sharesTimeSeriesByMonth = {}\r\n      sharesTimeSeries.forEach((shares) => {\r\n            \r\n            var date = new Date(shares['Date Posted'])\r\n            var month = date.getMonth()\r\n            //get month word \r\n            month = new Date(date.getFullYear(), month, 1).toLocaleString('default', { month: 'short' })\r\n            var year = date.getFullYear()\r\n            var monthYear = month + '-' + year\r\n            if (sharesTimeSeriesByMonth[monthYear]) {\r\n            sharesTimeSeriesByMonth[monthYear].Shares += shares.Shares\r\n            } else {\r\n            sharesTimeSeriesByMonth[monthYear] = {\r\n                Shares: shares.Shares,\r\n                'Date Posted': monthYear\r\n            }\r\n            }\r\n        }   \r\n        )\r\n\r\n        sharesTimeSeries = Object.values(sharesTimeSeriesByMonth)\r\n    }\r\n    setSharesTimeSeries(sharesTimeSeries)\r\n\r\n\r\n\r\n  }, [analyticsData])\r\n  console.log({ sharesTimeSeries })\r\n  const chartData = {\r\n\r\n    series: [{\r\n      name: \"Shares\",\r\n      data: sharesTimeSeries?.map((shares) => (shares?.Shares?.toFixed(0))),\r\n      //color \r\n      color: color\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'area',\r\n        height: 350,\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n        toolbar: {\r\n          show: false\r\n        }\r\n\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n        //change color \r\n      },\r\n      colors: [color],\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.9,\r\n          opacityTo: 0.4,\r\n          stops: [0, 80, 100]\r\n        }\r\n      },\r\n\r\n      labels: sharesTimeSeries?.map((shares) => (shares?.['Date Posted'])),\r\n      xaxis: {\r\n        //   type: 'datetime',\r\n        labels: {\r\n          show: false,\r\n        },\r\n      },\r\n      yaxis: {\r\n        opposite: true,\r\n        labels: {\r\n          show: false,\r\n          formatter: function (val) {\r\n            return ShortenNumber(val) + ' Shares ';\r\n          }\r\n        },\r\n      },\r\n      grid: {\r\n        //  borderColor: borderColor,                \r\n\r\n        strokeDashArray: 4,\r\n        //hide horizontal grid lines\r\n        yaxis: {\r\n          lines: {\r\n            show: false\r\n          }\r\n        },\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left'\r\n      }\r\n    },\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"block py-6 pb-0 rounded-xl shadow-sm bg-white  my-8\" style={{ width: '90%', maxWidth: '300px',height:'fit-content', borderLeft: 'solid 4px '+color, borderTopLeftRadius: '0px', borderBottomLeftRadius: '0px' }}>\r\n      <p className=\"text-3xl font-semibold text-slate-700 dark:text-navy-100 pl-6\" style={{ fontSize: '22px' }}>\r\n        {ShortenNumber(analyticsData?.totals?.total_shares)} <span style={{ color: color }}>Total Shares</span>\r\n      </p>\r\n      <div>\r\n\r\n        {sharesTimeSeries && <ReactApexChart options={chartData?.options} series={chartData?.series} type=\"area\" height={200} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TotalLikesChart","import React, { useEffect, useState } from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\n\r\nfunction TotalLikesChart({ analyticsData, color }) {\r\n  const ShortenNumber = (number) => {\r\n    if (number < 1000) {\r\n      return number\r\n    }\r\n    if (number < 1000000) {\r\n      return (number / 1000).toFixed(1) + 'k'\r\n    }\r\n    if (number < 1000000000) {\r\n      return (number / 1000000).toFixed(1) + 'm'\r\n    }\r\n    if (number < 1000000000000) {\r\n      return (number / 1000000000).toFixed(1) + 'b'\r\n    }\r\n    return '1t+'\r\n  }\r\n\r\n\r\n  const [commentsTimeSeries, setCommentsTimeSeries] = useState(null)\r\n  useEffect(() => {\r\n    if (!analyticsData) return\r\n    var commentsTimeSeries = (analyticsData?.comments_time_series)\r\n    //if commentsTimeSeries length is bigger than 100, calculate the total views  for each month, instad hcing the data for each day \r\n    if (commentsTimeSeries?.length > 100) {\r\n\r\n      var commentsTimeSeriesByMonth = {}\r\n      commentsTimeSeries.forEach((comments) => {\r\n            \r\n            var date = new Date(comments['Date Posted'])\r\n            var month = date.getMonth()\r\n            //get month word \r\n            month = new Date(date.getFullYear(), month, 1).toLocaleString('default', { month: 'short' })\r\n            var year = date.getFullYear()\r\n            var monthYear = month + '-' + year\r\n            if (commentsTimeSeriesByMonth[monthYear]) {\r\n            commentsTimeSeriesByMonth[monthYear].Comments += comments.Comments\r\n            } else {\r\n            commentsTimeSeriesByMonth[monthYear] = {\r\n                Comments: comments.Comments,\r\n                'Date Posted': monthYear\r\n            }\r\n            }\r\n        }   \r\n        )\r\n\r\n        commentsTimeSeries = Object.values(commentsTimeSeriesByMonth)\r\n    }\r\n    setCommentsTimeSeries(commentsTimeSeries)\r\n\r\n\r\n\r\n  }, [analyticsData])\r\n  console.log({ commentsTimeSeries })\r\n  const chartData = {\r\n\r\n    series: [{\r\n      name: \"Comments\",\r\n      data: commentsTimeSeries?.map((comments) => (comments?.Comments?.toFixed(0))),\r\n      //color \r\n      color: color\r\n    }],\r\n    options: {\r\n      chart: {\r\n        type: 'area',\r\n        height: 350,\r\n        zoom: {\r\n          enabled: true\r\n        },\r\n        toolbar: {\r\n          show: false\r\n        }\r\n\r\n      },\r\n      dataLabels: {\r\n        enabled: false\r\n      },\r\n      stroke: {\r\n        curve: 'smooth',\r\n        width: 3,\r\n        //change color \r\n      },\r\n      colors: [color],\r\n      fill: {\r\n        type: \"gradient\",\r\n        gradient: {\r\n\r\n          shadeIntensity: 1,\r\n          opacityFrom: 0.9,\r\n          opacityTo: 0.4,\r\n          stops: [0, 80, 100]\r\n        }\r\n      },\r\n\r\n      labels: commentsTimeSeries?.map((comments) => (comments?.['Date Posted'])),\r\n      xaxis: {\r\n        //   type: 'datetime',\r\n        labels: {\r\n          show: false,\r\n        },\r\n      },\r\n      yaxis: {\r\n        opposite: true,\r\n        labels: {\r\n          show: false,\r\n          formatter: function (val) {\r\n            return ShortenNumber(val) + ' Comments ';\r\n          }\r\n        },\r\n      },\r\n      grid: {\r\n        //  borderColor: borderColor,                \r\n\r\n        strokeDashArray: 4,\r\n        //hide horizontal grid lines\r\n        yaxis: {\r\n          lines: {\r\n            show: false\r\n          }\r\n        },\r\n      },\r\n      legend: {\r\n        horizontalAlign: 'left'\r\n      }\r\n    },\r\n\r\n\r\n  };\r\n\r\n  return (\r\n    <div className=\"block py-6 pb-0 rounded-xl shadow-sm bg-white  my-8\" style={{ width: '90%', maxWidth: '300px',height:'fit-content', borderLeft: 'solid 4px '+color, borderTopLeftRadius: '0px', borderBottomLeftRadius: '0px' }}>\r\n      <p className=\"text-3xl font-semibold text-slate-700 dark:text-navy-100 pl-6\" style={{ fontSize: '22px' }}>\r\n        {ShortenNumber(analyticsData?.totals?.total_comments)} <span style={{ color: color }}>Total Comments</span>\r\n      </p>\r\n      <div>\r\n\r\n        {commentsTimeSeries && <ReactApexChart options={chartData?.options} series={chartData?.series} type=\"area\" height={200} />}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TotalLikesChart","import React, { useState, useEffect } from 'react'\r\nimport { useParams } from \"react-router-dom\";\r\nimport AccountGrowthChart from '../components/AccountGrowthChart'\r\nimport TopDurations from '../components/TopDurations'\r\nimport PostingFrequencyChart from '../components/PostingFrequencyChart';\r\nimport MostUsedHashtags from '../components/MostUsedHashtags';\r\nimport UserOverview from '../components/UserOverview';\r\nimport TotalViewsChart from '../components/TotalViewsChart';\r\nimport TotalLikesChart from '../components/TotalLikesChart';\r\nimport TotalSharesChart from '../components/TotalSharesChart';\r\nimport TotalCommentsChart from '../components/TotalCommentsChart';\r\n\r\nfunction StatsPage() {\r\n    const { id } = useParams();\r\n\r\n    const [analyticsData, setAnalyticsData] = useState(null)\r\n\r\n    const GetAnalyticsData = async () => {\r\n        try {\r\n            const response = await fetch(`${global.HOST}/api/profile/${id}`)\r\n            const data = await response.json()\r\n            setAnalyticsData(data)\r\n        } catch (e) {\r\n            console.log(e.message)\r\n        }\r\n\r\n    }\r\n    useEffect(() => {\r\n        if (!id) return\r\n        GetAnalyticsData()\r\n    }, [id])\r\n\r\n    console.log({ analyticsData })\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"mixed-chart py-12 \">\r\n                 <UserOverview analyticsData={analyticsData} /> \r\n                 <div className='flex flex-wrap m-auto justify-between\t ' style={{width:'90%', maxWidth:'1700px'}}>\r\n              <TotalViewsChart analyticsData={analyticsData} color={\"#F1416C\"} />\r\n                 <TotalLikesChart analyticsData={analyticsData} color={\"#7239EA\"} />\r\n                 <TotalSharesChart analyticsData={analyticsData} color={\"#FFC700\"} />\r\n                 <TotalCommentsChart analyticsData={analyticsData} color={\"#50CD89\"} /> \r\n                 </div>\r\n                 <AccountGrowthChart analyticsData={analyticsData} /> \r\n                {/* <PostingFrequencyChart analyticsData={analyticsData} />   */}\r\n            <div className='flex flex-wrap' style={{width:'90%', maxWidth:'1700px', margin:'auto'}}>\r\n\r\n                <MostUsedHashtags analyticsData={analyticsData} />  \r\n                  <TopDurations analyticsData={analyticsData} />   \r\n            </div>\r\n                   \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StatsPage"],"names":["_ref","analyticsData","_useState","useState","_useState2","_slicedToArray","_useState3","_useState4","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","_useState11","_useState12","allTimeSeries","setAllTimeSeries","useEffect","_analyticsData$videos","videos_time_series","length","allTimeSeriesByMonth","i","video","date","Date","month","getMonth","monthYear","getFullYear","toLocaleString","Videos","Views","views_time_series","Likes","likes_time_series","Shares","shares_time_series","Comments","comments_time_series","Object","values","console","log","_useState13","_useState14","chartData","setChartData","series","name","data","map","Number","options","chart","height","stacked","toolbar","show","colors","fill","gradient","dataLabels","enabled","stroke","curve","width","xaxis","categories","labels","yaxis","axisTicks","axisBorder","color","style","title","text","tooltip","seriesName","opposite","legend","horizontalAlign","offsetX","_jsxs","id","className","maxWidth","margin","children","_jsx","ReactApexChart","type","topDurations","setTopDurations","videoDurationData","video_duration_data","videoDurationDataArray","keys","key","value","sort","a","b","duration","_duration$value","toFixed","fontFamily","plotOptions","bar","borderRadius","horizontal","distributed","barHeight","position","textAnchor","offsetY","fontSize","fontWeight","align","formatter","val","opt","isInteger","parseInt","toString","grid","lines","padding","bottom","strokeDashArray","y","mostUsedHashtags","setMostUsedHashtags","hashtags_data","overflowY","overflowX","hashtag","_hashtag$hashtag","marginRight","substring","left","count","minWidth","number","profileDetails","setProfileDetails","totals","setTotals","profile_details","src","global","HOST","username","alt","filter","borderBottom","marginBlock","bio","link_in_bio","marginInline","marginTop","followers","BsFillStarFill","transform","following","total_videos","RiClapperboardFill","_analyticsData$totals","ShortenNumber","viewsTimeSeries","setViewsTimeSeries","_viewsTimeSeries","viewsTimeSeriesByMonth","forEach","views","_views$Views","zoom","shadeIntensity","opacityFrom","opacityTo","stops","borderLeft","borderTopLeftRadius","borderBottomLeftRadius","total_views","likesTimeSeries","setLikesTimeSeries","_likesTimeSeries","likesTimeSeriesByMonth","likes","_likes$Likes","total_likes","sharesTimeSeries","setSharesTimeSeries","_sharesTimeSeries","sharesTimeSeriesByMonth","shares","_shares$Shares","total_shares","commentsTimeSeries","setCommentsTimeSeries","_commentsTimeSeries","commentsTimeSeriesByMonth","comments","_comments$Comments","total_comments","useParams","setAnalyticsData","GetAnalyticsData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","fetch","concat","sent","json","t0","message","stop","apply","arguments","UserOverview","TotalViewsChart","TotalLikesChart","TotalSharesChart","TotalCommentsChart","AccountGrowthChart","MostUsedHashtags","TopDurations"],"sourceRoot":""}